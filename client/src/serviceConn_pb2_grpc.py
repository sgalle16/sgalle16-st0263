# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import serviceConn_pb2 as serviceConn__pb2


class P2PServiceConnectionStub(object):
    """El servicio P2P define los métodos que los peers pueden llamar.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Handshake = channel.unary_unary(
                '/proto.P2PServiceConnection/Handshake',
                request_serializer=serviceConn__pb2.HandshakeRequest.SerializeToString,
                response_deserializer=serviceConn__pb2.HandshakeResponse.FromString,
                )
        self.MonitorPeers = channel.stream_stream(
                '/proto.P2PServiceConnection/MonitorPeers',
                request_serializer=serviceConn__pb2.PeerStatusUpdate.SerializeToString,
                response_deserializer=serviceConn__pb2.PeerUpdateResponse.FromString,
                )
        self.GetPeers = channel.unary_unary(
                '/proto.P2PServiceConnection/GetPeers',
                request_serializer=serviceConn__pb2.Empty.SerializeToString,
                response_deserializer=serviceConn__pb2.PeerList.FromString,
                )


class P2PServiceConnectionServicer(object):
    """El servicio P2P define los métodos que los peers pueden llamar.
    """

    def Handshake(self, request, context):
        """Handshake es llamado cuando un peer se conecta exitosamente a la red.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorPeers(self, request_iterator, context):
        """MonitorPeers permite el intercambio bidireccional de actualizaciones de estado entre el servidor y los peers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPeers(self, request, context):
        """GetPeers devuelve una lista de todos los peers conocidos en la red.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_P2PServiceConnectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Handshake': grpc.unary_unary_rpc_method_handler(
                    servicer.Handshake,
                    request_deserializer=serviceConn__pb2.HandshakeRequest.FromString,
                    response_serializer=serviceConn__pb2.HandshakeResponse.SerializeToString,
            ),
            'MonitorPeers': grpc.stream_stream_rpc_method_handler(
                    servicer.MonitorPeers,
                    request_deserializer=serviceConn__pb2.PeerStatusUpdate.FromString,
                    response_serializer=serviceConn__pb2.PeerUpdateResponse.SerializeToString,
            ),
            'GetPeers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPeers,
                    request_deserializer=serviceConn__pb2.Empty.FromString,
                    response_serializer=serviceConn__pb2.PeerList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.P2PServiceConnection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class P2PServiceConnection(object):
    """El servicio P2P define los métodos que los peers pueden llamar.
    """

    @staticmethod
    def Handshake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.P2PServiceConnection/Handshake',
            serviceConn__pb2.HandshakeRequest.SerializeToString,
            serviceConn__pb2.HandshakeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorPeers(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/proto.P2PServiceConnection/MonitorPeers',
            serviceConn__pb2.PeerStatusUpdate.SerializeToString,
            serviceConn__pb2.PeerUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.P2PServiceConnection/GetPeers',
            serviceConn__pb2.Empty.SerializeToString,
            serviceConn__pb2.PeerList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

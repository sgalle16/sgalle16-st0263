// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/serviceConn.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	P2PServiceConnection_Handshake_FullMethodName    = "/proto.P2PServiceConnection/Handshake"
	P2PServiceConnection_MonitorPeers_FullMethodName = "/proto.P2PServiceConnection/MonitorPeers"
	P2PServiceConnection_GetPeers_FullMethodName     = "/proto.P2PServiceConnection/GetPeers"
)

// P2PServiceConnectionClient is the client API for P2PServiceConnection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P2PServiceConnectionClient interface {
	// Handshake es llamado cuando un peer se conecta exitosamente a la red.
	Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error)
	// MonitorPeers permite el intercambio bidireccional de actualizaciones de estado entre el servidor y los peers.
	MonitorPeers(ctx context.Context, opts ...grpc.CallOption) (P2PServiceConnection_MonitorPeersClient, error)
	// GetPeers devuelve una lista de todos los peers conocidos en la red.
	GetPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerList, error)
}

type p2PServiceConnectionClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PServiceConnectionClient(cc grpc.ClientConnInterface) P2PServiceConnectionClient {
	return &p2PServiceConnectionClient{cc}
}

func (c *p2PServiceConnectionClient) Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	out := new(HandshakeResponse)
	err := c.cc.Invoke(ctx, P2PServiceConnection_Handshake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceConnectionClient) MonitorPeers(ctx context.Context, opts ...grpc.CallOption) (P2PServiceConnection_MonitorPeersClient, error) {
	stream, err := c.cc.NewStream(ctx, &P2PServiceConnection_ServiceDesc.Streams[0], P2PServiceConnection_MonitorPeers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PServiceConnectionMonitorPeersClient{stream}
	return x, nil
}

type P2PServiceConnection_MonitorPeersClient interface {
	Send(*PeerStatusUpdate) error
	Recv() (*PeerUpdateResponse, error)
	grpc.ClientStream
}

type p2PServiceConnectionMonitorPeersClient struct {
	grpc.ClientStream
}

func (x *p2PServiceConnectionMonitorPeersClient) Send(m *PeerStatusUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p2PServiceConnectionMonitorPeersClient) Recv() (*PeerUpdateResponse, error) {
	m := new(PeerUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p2PServiceConnectionClient) GetPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := c.cc.Invoke(ctx, P2PServiceConnection_GetPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PServiceConnectionServer is the server API for P2PServiceConnection service.
// All implementations must embed UnimplementedP2PServiceConnectionServer
// for forward compatibility
type P2PServiceConnectionServer interface {
	// Handshake es llamado cuando un peer se conecta exitosamente a la red.
	Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error)
	// MonitorPeers permite el intercambio bidireccional de actualizaciones de estado entre el servidor y los peers.
	MonitorPeers(P2PServiceConnection_MonitorPeersServer) error
	// GetPeers devuelve una lista de todos los peers conocidos en la red.
	GetPeers(context.Context, *Empty) (*PeerList, error)
	mustEmbedUnimplementedP2PServiceConnectionServer()
}

// UnimplementedP2PServiceConnectionServer must be embedded to have forward compatible implementations.
type UnimplementedP2PServiceConnectionServer struct {
}

func (UnimplementedP2PServiceConnectionServer) Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedP2PServiceConnectionServer) MonitorPeers(P2PServiceConnection_MonitorPeersServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorPeers not implemented")
}
func (UnimplementedP2PServiceConnectionServer) GetPeers(context.Context, *Empty) (*PeerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeers not implemented")
}
func (UnimplementedP2PServiceConnectionServer) mustEmbedUnimplementedP2PServiceConnectionServer() {}

// UnsafeP2PServiceConnectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PServiceConnectionServer will
// result in compilation errors.
type UnsafeP2PServiceConnectionServer interface {
	mustEmbedUnimplementedP2PServiceConnectionServer()
}

func RegisterP2PServiceConnectionServer(s grpc.ServiceRegistrar, srv P2PServiceConnectionServer) {
	s.RegisterService(&P2PServiceConnection_ServiceDesc, srv)
}

func _P2PServiceConnection_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceConnectionServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PServiceConnection_Handshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceConnectionServer).Handshake(ctx, req.(*HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PServiceConnection_MonitorPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PServiceConnectionServer).MonitorPeers(&p2PServiceConnectionMonitorPeersServer{stream})
}

type P2PServiceConnection_MonitorPeersServer interface {
	Send(*PeerUpdateResponse) error
	Recv() (*PeerStatusUpdate, error)
	grpc.ServerStream
}

type p2PServiceConnectionMonitorPeersServer struct {
	grpc.ServerStream
}

func (x *p2PServiceConnectionMonitorPeersServer) Send(m *PeerUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p2PServiceConnectionMonitorPeersServer) Recv() (*PeerStatusUpdate, error) {
	m := new(PeerStatusUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _P2PServiceConnection_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceConnectionServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PServiceConnection_GetPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceConnectionServer).GetPeers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// P2PServiceConnection_ServiceDesc is the grpc.ServiceDesc for P2PServiceConnection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2PServiceConnection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.P2PServiceConnection",
	HandlerType: (*P2PServiceConnectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _P2PServiceConnection_Handshake_Handler,
		},
		{
			MethodName: "GetPeers",
			Handler:    _P2PServiceConnection_GetPeers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorPeers",
			Handler:       _P2PServiceConnection_MonitorPeers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/serviceConn.proto",
}
